// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package parts_repo

import (
	"context"
)

const getByFields = `-- name: GetByFields :many
select id, part_order, variant, body, page_id from parts 
where (id = COALESCE(NULLIF($1::int, 0), id)) AND 
(username = COALESCE(NULLIF($2::text, ''), username)) AND 
(email = COALESCE(NULLIF($3::text, ''), email)) 
limit COALESCE(NULLIF($4::int, 0), 1)
`

type GetByFieldsParams struct {
	ID       int32
	Username string
	Email    string
	Limits   int32
}

func (q *Queries) GetByFields(ctx context.Context, arg GetByFieldsParams) ([]Part, error) {
	rows, err := q.db.Query(ctx, getByFields,
		arg.ID,
		arg.Username,
		arg.Email,
		arg.Limits,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Part
	for rows.Next() {
		var i Part
		if err := rows.Scan(
			&i.ID,
			&i.PartOrder,
			&i.Variant,
			&i.Body,
			&i.PageID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsert = `-- name: Upsert :one
insert into parts (variant, body, page_id) values ($1, $2, $3) 
on conflict (id) do 
update set variant = $1, body = $2, page_id = $3 returning variant, body, page_id, id
`

type UpsertParams struct {
	Variant PartType
	Body    string
	PageID  int64
}

type UpsertRow struct {
	Variant PartType
	Body    string
	PageID  int64
	ID      int32
}

func (q *Queries) Upsert(ctx context.Context, arg UpsertParams) (UpsertRow, error) {
	row := q.db.QueryRow(ctx, upsert, arg.Variant, arg.Body, arg.PageID)
	var i UpsertRow
	err := row.Scan(
		&i.Variant,
		&i.Body,
		&i.PageID,
		&i.ID,
	)
	return i, err
}
