// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0

package parts_repo

import (
	"database/sql/driver"
	"fmt"
)

type PartType string

const (
	PartTypeHeader1 PartType = "header1"
	PartTypeHeader2 PartType = "header2"
	PartTypeHeader3 PartType = "header3"
	PartTypeText    PartType = "text"
	PartTypeImage   PartType = "image"
)

func (e *PartType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = PartType(s)
	case string:
		*e = PartType(s)
	default:
		return fmt.Errorf("unsupported scan type for PartType: %T", src)
	}
	return nil
}

type NullPartType struct {
	PartType PartType
	Valid    bool // Valid is true if PartType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullPartType) Scan(value interface{}) error {
	if value == nil {
		ns.PartType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.PartType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullPartType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.PartType), nil
}

type Part struct {
	ID        int32
	PartOrder int16
	Variant   PartType
	Body      string
	PageID    int64
}
