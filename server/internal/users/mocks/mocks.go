// Code generated by MockGen. DO NOT EDIT.
// Source: notik/internal/users (interfaces: Repo,Handler,Usecase)

// Package mock_users is a generated GoMock package.
package mock_users

import (
	context "context"
	users "notik/internal/users"
	users_repo "notik/internal/users/users_repo"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	echo "github.com/labstack/echo/v4"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepo) Create(arg0 context.Context, arg1 users_repo.CreateParams) (users_repo.CreateRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(users_repo.CreateRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepoMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepo)(nil).Create), arg0, arg1)
}

// GetByFields mocks base method.
func (m *MockRepo) GetByFields(arg0 context.Context, arg1 users_repo.GetByFieldsParams) ([]users_repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByFields", arg0, arg1)
	ret0, _ := ret[0].([]users_repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByFields indicates an expected call of GetByFields.
func (mr *MockRepoMockRecorder) GetByFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByFields", reflect.TypeOf((*MockRepo)(nil).GetByFields), arg0, arg1)
}

// GetOneByFields mocks base method.
func (m *MockRepo) GetOneByFields(arg0 context.Context, arg1 users_repo.GetByFieldsParams) (users_repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByFields", arg0, arg1)
	ret0, _ := ret[0].(users_repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByFields indicates an expected call of GetOneByFields.
func (mr *MockRepoMockRecorder) GetOneByFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByFields", reflect.TypeOf((*MockRepo)(nil).GetOneByFields), arg0, arg1)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockHandler) Create() echo.HandlerFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create")
	ret0, _ := ret[0].(echo.HandlerFunc)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockHandlerMockRecorder) Create() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHandler)(nil).Create))
}

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsecase) Create(arg0 context.Context, arg1 users.CreateInput) (*users.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*users.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), arg0, arg1)
}

// GetOneByFields mocks base method.
func (m *MockUsecase) GetOneByFields(arg0 context.Context, arg1 users_repo.GetByFieldsParams) (users_repo.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOneByFields", arg0, arg1)
	ret0, _ := ret[0].(users_repo.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOneByFields indicates an expected call of GetOneByFields.
func (mr *MockUsecaseMockRecorder) GetOneByFields(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOneByFields", reflect.TypeOf((*MockUsecase)(nil).GetOneByFields), arg0, arg1)
}
