// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package users_repo

import (
	"context"
)

const create = `-- name: Create :one
insert into
	users (username, email, password)
values
	($1, $2, $3) RETURNING id, username, email
`

type CreateParams struct {
	Username string
	Email    string
	Password string
}

type CreateRow struct {
	ID       int32
	Username string
	Email    string
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (CreateRow, error) {
	row := q.db.QueryRow(ctx, create, arg.Username, arg.Email, arg.Password)
	var i CreateRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const delete = `-- name: Delete :exec
delete from
	users
where
	id = $1
`

func (q *Queries) Delete(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, delete, id)
	return err
}

const getByEmail = `-- name: GetByEmail :one
select username, email, password from users where email = $1
`

type GetByEmailRow struct {
	Username string
	Email    string
	Password string
}

func (q *Queries) GetByEmail(ctx context.Context, email string) (GetByEmailRow, error) {
	row := q.db.QueryRow(ctx, getByEmail, email)
	var i GetByEmailRow
	err := row.Scan(&i.Username, &i.Email, &i.Password)
	return i, err
}
